#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # exit when using non-initialized environment variable

# Setup common env vars and folders
source /var/vcap/packages/bosh-helpers/ctl_setup.sh 'docker'
export DOCKER_PID_FILE=${DOCKER_PID_DIR}/docker.pid
export PATH="/var/vcap/packages/docker/bin:$PATH"

function create_network_bridge(){
    if [ -n "${DOCKER_BRIDGE_NAME:-}" ]; then
        set +e
        ip link delete docker0
        ip link delete ${DOCKER_BRIDGE_NAME}
        /var/vcap/packages/docker/sbin/brctl addbr ${DOCKER_BRIDGE_NAME}
        ip addr add ${DOCKER_BRIDGE_CIDR} dev ${DOCKER_BRIDGE_NAME}
        ip link set dev ${DOCKER_BRIDGE_NAME} up
        set -e
    fi
}

case $1 in

  start)
    pid_guard ${DOCKER_PID_FILE} ${JOB_NAME}

    # Install aufs-tools
    dpkg -i /var/vcap/packages/docker/aufs-tools_20120411-3_amd64.deb

    # Create docker data store
    if [ ! -d ${DOCKER_STORE_DIR}/docker ]; then
      mkdir -p ${DOCKER_STORE_DIR}/docker
      chmod 770 ${DOCKER_STORE_DIR}/docker
    fi

    # Set ulimits
    ulimit -n ${DOCKER_ULIMIT_NOFILE}

    # Set vm.max_map_count
    [ -n "${DOCKER_VM_MAX_MAP_COUNT}" ] && sysctl -w vm.max_map_count=${DOCKER_VM_MAX_MAP_COUNT}

    # Mount cgroupfs hierarchy
    ${JOB_DIR}/bin/cgroupfs-mount

    # Setup ssh env vars
    ${JOB_DIR}/bin/setup-user-env

    create_network_bridge

    # Enable shared_mounts
    [ "${DOCKER_SHARED_MOUNTS_ENABLE}" = "true" ] && mount --make-shared /


    # Link the default docker configuration location to the location specified by docker bosh release
    if [[ "${DOCKER_PID_DIR}" != "/var/run" ]]; then
      ln -sf "${DOCKER_PID_DIR}/docker.sock" "/var/run/docker.sock"
    fi

    # Create certs for private docker registry
    /var/vcap/packages/docker-registry-certs/bin/generate_certs ${JOB_DIR}/config/docker_registry_certs

    # Start Docker daemon
    exec dockerd \
        ${DOCKER_BRIDGE:-} \
        ${DOCKER_DEBUG} \
        ${DOCKER_DEFAULT_GATEWAY:-} \
        ${DOCKER_DEFAULT_GATEWAY_V6:-} \
        ${DOCKER_DEFAULT_ULIMITS:-} \
        ${DOCKER_DNS_SERVERS:-} \
        ${DOCKER_DNS_OPTIONS:-} \
        ${DOCKER_DNS_SEARCH:-} \
        ${DOCKER_EXEC_OPTIONS:-} \
        --group vcap \
        --data-root ${DOCKER_STORE_DIR}/docker \
        --host unix://${DOCKER_PID_DIR}/docker.sock \
        ${DOCKER_ICC} \
        ${DOCKER_INSECURE_REGISTRIES:-} \
        ${DOCKER_IP:-} \
        ${DOCKER_IPFORWARD} \
        ${DOCKER_IPMASQ} \
        ${DOCKER_IPTABLES} \
        ${DOCKER_IPV6} \
        ${DOCKER_LABELS:-} \
        ${DOCKER_LIVE_RESTORE:-} \
        ${DOCKER_LOG_LEVEL} \
        ${DOCKER_LOG_DRIVER:-} \
        ${DOCKER_LOG_OPTIONS:-} \
        ${DOCKER_MTU:-} \
        --pidfile ${DOCKER_PID_FILE} \
        ${DOCKER_REGISTRY_MIRRORS:-} \
        ${DOCKER_SELINUX_ENABLED} \
        ${DOCKER_STORAGE_DRIVER:-} \
        ${DOCKER_STORAGE_OPTIONS:-} \
        ${DOCKER_TCP:-} \
        ${DOCKER_TLS_VERIFY_OPTION:-} \
        ${DOCKER_TLS_CACERT:-} \
        ${DOCKER_TLS_CERT:-} \
        ${DOCKER_TLS_KEY:-} \
        ${DOCKER_USERLAND_PROXY} \
        >>${DOCKER_LOG_DIR}/${OUTPUT_LABEL}.stdout.log \
        2>>${DOCKER_LOG_DIR}/${OUTPUT_LABEL}.stderr.log
    ;;

  stop)
    # Stop Docker containers
    echo "Stopping docker containers..."
    containers="$(/var/vcap/packages/docker/bin/docker --host unix://${DOCKER_PID_DIR}/docker.sock ps -q)"
    if [[ ! -z $containers ]]; then
      for container in $containers
      do
        echo "Stopping docker container ${container}"
        /var/vcap/packages/docker/bin/docker --host unix://${DOCKER_PID_DIR}/docker.sock stop ${container}
      done
    fi

    # Stop Docker daemon
    echo -n "Stopping docker daemon..."
    kill_and_wait ${DOCKER_PID_FILE}
    echo "DEBUG: Contents of /proc/mounts after stopping docker"
    cat /proc/mounts

    mounts=$(cat /proc/mounts | grep "/var/vcap/store/docker/docker/${DOCKER_STORAGE_DRIVER_VALUE}/.*" | awk '{print $2}')
    for mount in $mounts; do
      echo "Unmounting $mount"
      umount $mount
    done

    if [[ -d /var/vcap/store/docker/docker/${DOCKER_STORAGE_DRIVER_VALUE} ]]; then
      set +e
      echo "Unmounting /var/vcap/store/docker/docker/${DOCKER_STORAGE_DRIVER_VALUE}"
      umount /var/vcap/store/docker/docker/${DOCKER_STORAGE_DRIVER_VALUE}
      set -e
    fi

    if [[ -d /var/vcap/store/docker/docker ]]; then
      set +e
      echo "Unmounting /var/vcap/store/docker/docker"
      umount /var/vcap/store/docker/docker
      set -e
    fi

    if [[ -L "/var/run/docker.sock" ]]; then
      rm /var/run/docker.sock
    fi
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    exit 1
    ;;

esac
exit 0
